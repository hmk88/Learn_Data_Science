# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JfiMWzaapp4_c-cpBuaDNBDwoUkqdAZB
"""

import pandas as pd
url = 'https://raw.githubusercontent.com/hmk88/Jupyter-stuff/master/Helsinki_weather.csv'
df1 = pd.read_csv(url)    #Air temperature

df1.head()

df1= df1.drop('Time (h)', axis=1)

# Commented out IPython magic to ensure Python compatibility.
# Import libraries
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
# %matplotlib inline

url = 'https://raw.githubusercontent.com/hmk88/Jupyter-stuff/master/as.csv'
df2 = pd.read_csv(url)    #Average surface temperature

df2= df2.drop('Time (h)', axis=1)

url = 'https://raw.githubusercontent.com/hmk88/Jupyter-stuff/master/ca.csv'
df3 = pd.read_csv(url)    #Heat capacity

df3= df3.drop(' Time (h)', axis=1)

url = 'https://raw.githubusercontent.com/hmk88/Jupyter-stuff/master/co.csv'
df4 = pd.read_csv(url)    #Thermal conductivity

df4= df4.drop('Time (h)', axis=1)

url = 'https://raw.githubusercontent.com/hmk88/Jupyter-stuff/master/de.csv'
df5 = pd.read_csv(url)    #Density

df5= df5.drop('Time (h)', axis=1)

url = 'https://raw.githubusercontent.com/hmk88/Jupyter-stuff/master/di.csv'
df6 = pd.read_csv(url)    #Diffusivity

df6= df6.drop('Time (h)', axis=1)

url = 'https://raw.githubusercontent.com/hmk88/Jupyter-stuff/master/fl.csv'
df7 = pd.read_csv(url)    #Fluid temperature

df7= df7.drop('Time (h)', axis=1)

df7.head()

df_raw = pd.concat([df1,df2,df3,df4,df5,df6,df7], axis=1) # Save original data set, just in case.

df_raw.head()

df_raw= df_raw.dropna(how='all', axis='columns')

df_raw.dropna(inplace=True)

df_raw.head()

source= df_raw.drop('Temperature (degC)', axis=1)

target= df_raw['Temperature (degC)']

import numpy as np
from sklearn.preprocessing import normalize

X= np.array(source)
y= np.array(target) 

X = normalize(X, axis=0, norm='max')
y = normalize(y.reshape(-1,1), axis=0, norm='max')

y

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)
print (X_train.shape, y_train.shape)
print (X_test.shape, y_test.shape)

from sklearn.svm import SVR
svr_rbf = SVR(kernel='rbf', C=100, gamma=0.1, epsilon=.1)
result=svr_rbf.fit(X_train, y_train)

prediction=svr_rbf.predict(X_test)

from matplotlib import pyplot as plt
plt.plot(t, y_test, 'bs', t, prediction, 'g^')
plt.xlabel('Samples')
plt.ylabel('prediction')
plt.title('SVR')

svr_rbf.score(X_test, y_test)

t=range(0, 1722)

prediction

Data= [prediction, y_test]

Data=pd.DataFrame(Data)

Data=Data.T
Data

from google.colab import files
Data.to_csv('SVR.csv') 
files.download('SVR.csv')

from sklearn import metrics

#MAE
print(metrics.mean_absolute_error(y_test, prediction))

#MSE
print(metrics.mean_squared_error(y_test, prediction))

#RMSE
print(np.sqrt(metrics.mean_squared_error(y_test, prediction)))

from sklearn.ensemble import AdaBoostRegressor

model_ada=AdaBoostRegressor(n_estimators=100)
fit=model_ada.fit(X_train, y_train)

prediction_ada=model_ada.predict(X_test)

from matplotlib import pyplot as plt
plt.plot(t, y_test, 'bs', t, prediction_ada, 'g^')
plt.xlabel('Samples')
plt.ylabel('prediction')
plt.title('adaBoost')

Data= [prediction_ada, y_test]

Data=pd.DataFrame(Data)
Data=Data.T
Data

Data.to_csv('ada_boost.csv') 
files.download('ada_boost.csv')

#MAE
print(metrics.mean_absolute_error(y_test, prediction_ada))

#MSE
print(metrics.mean_squared_error(y_test, prediction_ada))

#RMSE
print(np.sqrt(metrics.mean_squared_error(y_test, prediction_ada)))

model_ada.score(X_test, y_test)

from sklearn.linear_model import LinearRegression

model_LR = LinearRegression()
fit=model_LR.fit(X_train, y_train)

prediction_LR=model_LR.predict(X_test)

from matplotlib import pyplot as plt
plt.plot(t, y_test, 'bs', t, prediction_LR, 'g^')
plt.xlabel('Samples')
plt.ylabel('prediction')
plt.title('Linear regression')

#MAE
print(metrics.mean_absolute_error(y_test, prediction_LR))

#MSE
print(metrics.mean_squared_error(y_test, prediction_LR))

#RMSE
print(np.sqrt(metrics.mean_squared_error(y_test, prediction_LR)))

model_LR.score(X_test, y_test)

from sklearn.neural_network import MLPRegressor

model_mlpr = MLPRegressor()
fit=model_mlpr.fit(X_train, y_train)

prediction_mlpr=model_mlpr.predict(X_test)

from matplotlib import pyplot as plt
plt.plot(t, y_test, 'bs', t, prediction_mlpr, 'g^')
plt.xlabel('Samples')
plt.ylabel('prediction')
plt.title('Multi-layer perceptron regressor')

#MAE
print(metrics.mean_absolute_error(y_test, prediction_mlpr))

#MSE
print(metrics.mean_squared_error(y_test, prediction_mlpr))

#RMSE
print(np.sqrt(metrics.mean_squared_error(y_test, prediction_mlpr)))

model_mlpr.score(X_test, y_test)

from sklearn.ensemble import BaggingRegressor

model_bg=BaggingRegressor()
fit=model_bg.fit(X_train, y_train)
prediction_bg=model_bg.predict(X_test)

from matplotlib import pyplot as plt
plt.plot(t, y_test, 'bs', t, prediction_bg, 'g^')
plt.xlabel('Samples')
plt.ylabel('prediction')
plt.title('Bagging regressor')

#MAE
print(metrics.mean_absolute_error(y_test, prediction_bg))

#MSE
print(metrics.mean_squared_error(y_test, prediction_bg))

#RMSE
print(np.sqrt(metrics.mean_squared_error(y_test, prediction_bg)))

model_bg.score(X_test, y_test)

from sklearn.neighbors import KNeighborsRegressor

model_knr = KNeighborsRegressor(n_neighbors=2)
fit=model_knr.fit(X_train, y_train)
prediction_knr=model_knr.predict(X_test)

from matplotlib import pyplot as plt
plt.plot(t, y_test, 'bs', t, prediction_knr, 'g^')
plt.xlabel('Samples')
plt.ylabel('prediction')
plt.title('Kneighbors regressor')

#MAE
print(metrics.mean_absolute_error(y_test, prediction_knr))

#MSE
print(metrics.mean_squared_error(y_test, prediction_knr))

#RMSE
print(np.sqrt(metrics.mean_squared_error(y_test, prediction_knr)))

model_knr.score(X_test, y_test)

from sklearn.linear_model import HuberRegressor

model_hu = HuberRegressor()
s_train, s_test, t_train, t_test = train_test_split(source, target, test_size=0.2)

fit=model_hu.fit(s_train, t_train)
prediction_hu=model_hu.predict(s_test)

from matplotlib import pyplot as plt
plt.plot(t, t_test, 'bs', t, prediction_hu, 'g^')
plt.xlabel('Samples')
plt.ylabel('prediction')
plt.title('Huber regressor')

#MAE
print(metrics.mean_absolute_error(t_test, prediction_hu))

#MSE
print(metrics.mean_squared_error(t_test, prediction_hu))

#RMSE
print(np.sqrt(metrics.mean_squared_error(t_test, prediction_hu)))

model_hu.score(s_test, t_test)

from sklearn.linear_model import BayesianRidge

model_br = BayesianRidge()
fit=model_br.fit(X_train, y_train)
prediction_br=model_br.predict(X_test)

from matplotlib import pyplot as plt
plt.plot(t, y_test, 'bs', t, prediction_br, 'g^')
plt.xlabel('Samples')
plt.ylabel('prediction')
plt.title('BeysianRidge regressor')

#MAE
print(metrics.mean_absolute_error(y_test, prediction_br))

#MSE
print(metrics.mean_squared_error(y_test, prediction_br))

#RMSE
print(np.sqrt(metrics.mean_squared_error(y_test, prediction_br)))

model_br.score(X_test, y_test)